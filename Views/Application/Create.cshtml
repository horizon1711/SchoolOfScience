@model SchoolOfScience.Models.ViewModels.ApplicationViewModel

<h1>My Application - @Model.student.name (ID: @Model.student.id)</h1>

<div class="program-details-title">
<h2>@Html.DisplayFor(model => model.program.name)</h2>
    <div class="program-note">
    @if (!String.IsNullOrEmpty(Model.program.job_position))
    {
        @(Model.program.job_position)
    }
    @if (!String.IsNullOrEmpty(Model.program.job_position) && !String.IsNullOrEmpty(Model.program.host_name))
    {
        <text> - </text>
    }
    @if (!String.IsNullOrEmpty(Model.program.host_name))
    {
        if (!String.IsNullOrEmpty(Model.program.website))
        {
            <a href="@(Model.program.website)" target="_blank" title="@(Model.program.website)">@(Model.program.host_name)</a>
        }
        else
        {
            @(Model.program.host_name)
        }
    }
    </div>
</div>

@if (Model.program.application_end_time != null)
{
<div class="program-details-deadline">
    <div class="display-label">
            Application Deadline
    </div>
    <div class="display-field">
        @String.Format("{0:yyyy-MM-dd HH:mm}", Model.program.application_end_time)
    </div>
</div>
}
<div class="clear-fix"></div>
<hr />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    
    @Html.HiddenFor(model => model.application.program_id)
    @Html.HiddenFor(model => model.application.student_id)
    @Html.HiddenFor(model => model.application.status_id)
    @Html.HiddenFor(model => model.no_of_exchange_options)
    
    <fieldset class="startCollapse">
        <legend>View Program Details<img src="@Url.Content("~/Images/Action/programdetails.gif")" /></legend>

        <div class="field-wrapper">
            <div class="display-label">
                @Html.LabelFor(model => model.program.description)
            </div>
            <div class="editor-field">
                @Html.Raw(Model.program.description)
            </div>
        </div>

    </fieldset>
    
    <fieldset class="collapse">
        <legend>Application Details</legend>
  
@if (Model.options.Count() == 0 && Model.attachments.Count() == 0 && !Model.program.require_exchange_option && !Model.program.require_appointment && !Model.program.require_interview)
{
    <p>No additional information is required for this application.</p>
}      
            <div class="field-wrapper">
        @for (int i = 0; i < Model.options.Count(); i++)
        {
                <div class="display-label">
                    @Html.DisplayFor(model => model.options[i].ProgramOptionValue.name)
                </div>
                <div class="editor-field">
                    @if (Model.options[i].ProgramOptionValue.required)
                    {
                        @Html.TextAreaFor(model => model.options[i].value, new { @class = "expanding", required = "required" }); <span class="required-text">(required)</span>
                    }
                    else
                    {
                        @Html.TextAreaFor(model => model.options[i].value, new { @class = "expanding" })
                    }
                    @Html.ValidationMessageFor(model => model.options[i].value)
                    @Html.HiddenFor(model => model.options[i].option_value_id)
                </div>
        }
            </div>
        
        <div class="clear-fix"></div>
        
        @if (Model.attachments.Count() > 0)
        {
        <hr />
            
        <div class="display-label">Please click on the icon to upload documents:</div>
        }
        
        <div class="field-wrapper">
        @for (int i = 0; i < Model.attachments.Count(); i++)
        {
                <div class="display-label">
                    @Html.DisplayFor(model => model.attachments[i].ProgramApplicationAttachment.name)
                    @if (Model.attachments[i].ProgramApplicationAttachment.required)
                    {
                        <span class="required-text">(required)</span>
                    }
                    :
                    @Html.HiddenFor(model => model.attachments[i].program_application_attachment_id)
                    <label id="attachments_@(i)__filename_label">
                        <a href="@Url.Action("Download", "FileHandler", new { filename = Model.attachments[i].filename, folder = Model.attachments[i].filepath })" target="_blank">@Html.DisplayFor(model => model.attachments[i].filename)</a>
                    </label>
                    <img src="@Url.Content("~/Images/Action/delete.gif")" class="delete-btn" id="delete-btn@(i)" title="Remove document" />
                    <img src="@Url.Content("~/Images/Action/upload.gif")" class="upload-btn" id="upload-btn@(i)" title="Upload document" />
                    @if (Model.attachments[i].ProgramApplicationAttachment.required)
                    {
                        @Html.HiddenFor(model => model.attachments[i].filename, new { @class = "filename-hidden", required = "required" })
                    }
                    else
                    {
                        @Html.HiddenFor(model => model.attachments[i].filename, new { @class = "filename-hidden" })
                    }
                    @Html.HiddenFor(model => model.attachments[i].filepath, new { @class = "filepath-hidden" })
                    @Html.ValidationMessageFor(model => model.attachments[i].filename)
                </div>
        }
        </div>
        
        <div class="clear-fix"></div>
        
        @if (Model.exchange_options.Count() > 0)
        {
        <hr />
            <div class="display-label">Please state your desired Exchange Destination in priority order:</div>
            <div class="display-label">
                @Html.ActionLink("Select from Destination List", "List", "ExchangeOption", null, new { @class = "destination-link" })
            </div>
        }

        <div class="field-wrapper">
        @for (int i = 0; i < Model.exchange_options.Count(); i++)
        {
            <div class="display-label">
                @{
            switch (i + 1)
            {
                case 1:
                            <text>@(i + 1)st Choice</text>
                    break;
                case 2:
                            <text>@(i + 1)nd Choice</text>
                    break;
                case 3:
                            <text>@(i + 1)rd Choice</text>
                    break;
                default:
                            <text>@(i + 1)th Choice</text>
                    break;
            }
                }
            </div>
            <div class="editor-field">
                @if (i == 0)
                {
                    @Html.DropDownListFor(model => model.exchange_options[i].exchange_option_id, new SelectList((IEnumerable<SelectListItem>)ViewBag.ExchangeOptionList, "Value", "Text", Model.exchange_options[i].exchange_option_id.ToString()), "None", new { @class = "chosen dest-select", required = "required" })
                } 
                else
                {
                    @Html.DropDownListFor(model => model.exchange_options[i].exchange_option_id, new SelectList((IEnumerable<SelectListItem>)ViewBag.ExchangeOptionList, "Value", "Text", Model.exchange_options[i].exchange_option_id.ToString()), "None", new { @class = "chosen dest-select" })
                }
                @Html.ValidationMessageFor(model => model.exchange_options[i].exchange_option_id)
                @Html.HiddenFor(model => model.exchange_options[i].priority)
            </div>
        }

        </div>

        <div class="clear-fix"></div>
        
        
        @if (Model.exchange_options.Count() > 0 && !String.IsNullOrEmpty(Model.program.note_exchange))
        {
            <div class="field-wrapper">
                <div class="display-label">
                    Notes:
                </div>
                <div class="display-field">
                    @Html.Raw(Model.program.note_exchange)
                </div>
            </div>
        }

        <div class="clear-fix"></div>
        
        @if (ViewBag.AppointmentList != null)
        {
        <hr />
            <div class="field-wrapper">
                <div class="display-field">
                    Please select an consultation session: 
                    <div class="warning">
                        *Session will NOT be reserved for "Saved Application".
                    </div>
                </div>
                <div class="editor-field">
                    @{IEnumerable<SchoolOfScience.Models.Appointment> AppointmentList = ViewBag.AppointmentList;}
                    @Html.DropDownListFor(model => model.application.appointment_id, new SelectList(AppointmentList.Select(a => new { id = a.id, text = String.Format("{0:yyyy-MM-dd}", a.start_time) + "<" + String.Format("{0:HH:mm}", a.start_time) + " to " + String.Format("{0:HH:mm}", a.end_time) + "> " + a.AppointmentHost.name + " at " + a.venue }), "id", "text"), String.Empty, new { required = "required" })
                    <a href="@Url.Action("Calendar", "Appointment", new { programid = Model.program.id })" class="calendar-link"><img src="@Url.Content("~/Images/Action/calendar.gif")" /></a>
                    @Html.ValidationMessageFor(model => model.application.appointment_id)
                </div>
            </div>
        }
        
    </fieldset>
        <p>
            <input type="submit" id="save" name="submit" value="Save" class="button cancel"/>
        </p>
        <p>
            <input type="submit" id="submit" name="submit" value="Submit Application Now"  class="button"/>
        </p>
}

@Scripts.Render("~/bundles/expanding")
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/bundles/collapse")
<script>
    $(function () {
        $("#save").click(function (e) {
            var r = confirm("Your application is saved, but is NOT submitted yet!\n\n***To submit your application, please go to ‘Enrichment Programs > My Applications > Edit’ and click ‘Submit’ before the application deadline.");
            if (!r) {
                e.preventDefault();
            } else {
                $("#application_status_id").val(1);
            }
        });
        $("#submit").click(function (e) {
            var r = confirm("Would you like to submit now? \n\n***You will not be able to make changes once you have clicked 'OK'.");
            if (!r) {
                e.preventDefault();
            } else {
                $("#application_status_id").val(2);
            }
        });

        $("fieldset.collapse").collapse();
        $("fieldset.startCollapse").collapse({ closed: true });

        $(".filename-hidden[value='']").prevAll(".delete-btn").hide();
        $(".filename-hidden[value!='']").prevAll(".upload-btn").hide();

        $(".upload-btn").click( function (e) {
            e.preventDefault();
            var actionUrl = '@Html.Raw(Url.Action("Upload", "FileHandler", new { elementId = "replace_elementId", folder = "Temp/Application/" + User.Identity.Name }))';
            actionUrl = actionUrl.replace("replace_elementId", $(this).nextAll("input.filename-hidden").prop("id"));
            window.open(actionUrl, 'popup', 'width=500,height=150,toolbar=0,menubar=0,location=0,status=0,scrollbars=0,resizable=1,left=0,top=0');
        });

        $(".delete-btn").click( function (e) {
            e.preventDefault();
            var elementId = "#" + $(this).nextAll(".filename-hidden").prop("id");
            $(elementId).val("");
            $(elementId).next(".filepath-hidden").val("");
            $(elementId + "_label a").html("");
            $(elementId + "_label a").prop("href", "");
            $(elementId).prevAll(".delete-btn").hide();
            $(elementId).prevAll(".upload-btn").show();
        });

        $(".destination-link").click(function (e) {
            e.preventDefault();
            showDialog($(this).prop("href"), "#error-dialog", "#exchange-list-dialog", 700, 450);
        });

        $(".calendar-link").click(function (e) {
            e.preventDefault();
            showDialog($(this).prop("href"), "#error-dialog", "#calendar-dialog", 900, 550);
        });

        $(".dest-select").change(function (e) {
            var selected = $(this).val();
            $(".dest-select option[value='" + selected + "']:selected").parent().not($(this)).val("");
        });

        $(".button").button();
    });
</script>
